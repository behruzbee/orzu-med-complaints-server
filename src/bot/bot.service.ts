import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { TelegrafContext } from './bot.context';
import { User } from '../database/entities/user.entity';
import { Repository } from 'typeorm';
import { Markup } from 'telegraf';
import { Complaint } from '../database/entities/complaint.entity';
import { Message } from 'telegraf/typings/core/types/typegram';
import * as fs from 'fs';
import * as path from 'path';
import axios from 'axios';
import { randomUUID } from 'crypto';
import * as ExcelJS from 'exceljs';
import { format } from 'date-fns'; // –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã

const steps = {
  branch: 'branch',
  category: 'category',
  complaints: 'complaints',
  patientPhoneNumber: 'patient_phone_number',
  patientFullName: 'patient_full_name',
};

@Injectable()
export class BotService {
  private readonly CONFIRMATION_CODE = '2585';

  constructor(
    @InjectRepository(User)
    private readonly userRepo: Repository<User>,
    @InjectRepository(Complaint)
    private readonly complaintRepo: Repository<Complaint>,
  ) {}

  async handleStart(ctx: TelegrafContext) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    let user = await this.userRepo.findOne({ where: { telegramId } });

    if (user?.isAuthorized) {
      await ctx.reply(
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ${user.firstName}!`,
        this.getMainMenu(),
      );
    } else {
      if (!user) {
        user = this.userRepo.create({
          telegramId,
          username: ctx.from?.username,
          firstName: ctx.from?.first_name,
          lastName: ctx.from?.last_name,
          isAuthorized: false,
        });
        await this.userRepo.save(user);
      }
      await ctx.reply('üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:');
    }
  }

  async handleText(ctx: TelegrafContext): Promise<void> {
    const telegramId: number | undefined = ctx.from?.id;
    const message = ctx.message as Message.TextMessage | undefined;
    const text: string | undefined = message?.text?.trim();

    if (!telegramId || !text) return;

    const user = await this.userRepo.findOne({ where: { telegramId } });
    if (!user) return;

    if (!user.isAuthorized) {
      if (text === this.CONFIRMATION_CODE) {
        user.isAuthorized = true;
        await this.userRepo.save(user);
        await ctx.reply('‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ!', this.getMainMenu());
      } else {
        await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
      return;
    }

    if (text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å') {
      user.complaintStep = null;
      user.tempBranch = null;
      user.tempCategory = null;
      user.complaintTextOrVoiceUrl = null;
      user.patientFullName = null;
      user.patientPhoneNumber = null;
      await this.userRepo.save(user);

      await ctx.reply(
        'üîÅ –ñ–∞–ª–æ–±–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        this.getMainMenu(),
      );
      return;
    }

    switch (user.complaintStep) {
      case steps.branch: {
        user.tempBranch = text;
        user.complaintStep = steps.category;
        await this.userRepo.save(user);
        await ctx.reply(
          '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∂–∞–ª–æ–±:',
          this.withCancelButton(this.getCategoryMenu()),
        );
        return;
      }

      case steps.category: {
        user.tempCategory = text;
        user.complaintStep = steps.complaints;
        await this.userRepo.save(user);
        await ctx.reply(
          '–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∂–∞–ª–æ–±—É üñäÔ∏è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üó£:',
        );
        return;
      }

      case steps.complaints: {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å –∏ —Å–µ–π—á–∞—Å —Ö–æ—á–µ—Ç –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç
        if (text === '.') {
          user.complaintStep = steps.patientFullName;
          await this.userRepo.save(user);
          await ctx.reply('–í—ã–≤–µ–¥–∏—Ç–µ –§.–ò.–û –ø–∞—Ü–∏–µ–Ω—Ç–∞.');
          return;
        }

        // –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –±—ã–ª –≥–æ–ª–æ—Å, –Ω–æ —Ç–µ–ø–µ—Ä—å —Ç–µ–∫—Å—Ç
        if (user.complaintTextOrVoiceUrl?.startsWith('http')) {
          user.complaintTextOrVoiceUrl += `\n–¢–µ–∫—Å—Ç: ${text}`;
        } else {
          user.complaintTextOrVoiceUrl = text;
        }

        user.complaintStep = steps.patientFullName;
        await this.userRepo.save(user);
        await ctx.reply('–í—ã–≤–µ–¥–∏—Ç–µ –§.–ò.–û –ø–∞—Ü–∏–µ–Ω—Ç–∞.');
        return;
      }

      case steps.patientFullName: {
        user.patientFullName = text;
        user.complaintStep = steps.patientPhoneNumber;
        await this.userRepo.save(user);
        await ctx.reply(
          '‚úÖ –í—ã–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞\n<b>–ü–†–ò–ú–ï–†: +998 99 123 45 67</b>.',
          { parse_mode: 'HTML' },
        );
        return;
      }

      case steps.patientPhoneNumber: {
        user.patientPhoneNumber = text;

        const complaint: Complaint = this.complaintRepo.create({
          // @ts-ignore
          user,
          branch: user.tempBranch || '---',
          category: user.tempCategory || '---',
          text: user.complaintTextOrVoiceUrl?.startsWith('http')
            ? null
            : user.complaintTextOrVoiceUrl || null,
          voiceUrl: user.complaintTextOrVoiceUrl?.startsWith('http')
            ? user.complaintTextOrVoiceUrl
            : null,
          status: '–ø–æ—Å—Ç—É–ø–∏–≤—à–∏–µ',
          patientFullName: user.patientFullName,
          patientPhoneNumber: user.patientPhoneNumber,
        });

        await this.complaintRepo.save(complaint);

        user.complaintStep = null;
        user.tempBranch = null;
        user.tempCategory = null;
        user.complaintTextOrVoiceUrl = null;
        user.patientFullName = null;
        user.patientPhoneNumber = null;

        await this.userRepo.save(user);

        await ctx.reply('‚úÖ –ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', this.getMainMenu());
        return;
      }

      default: {
        await this.routeMainMenu(ctx, text);
      }
    }
  }

  private async routeMainMenu(ctx: TelegrafContext, text: string) {
    switch (text) {
      case 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–±':
        await this.showComplaintsByStatus(ctx);
        break;
      case '‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É':
        await this.askBranch(ctx);
        break;
      default:
        await ctx.reply('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.');
    }
  }

  async showComplaintsByStatus(ctx: TelegrafContext): Promise<void> {
    const telegramId = ctx.from?.id;
    if (!telegramId) return;

    try {
      const complaints = await this.complaintRepo.find({
        order: { createdAt: 'DESC' },
      });

      if (!complaints.length) {
        await ctx.reply('‚ùå –ñ–∞–ª–æ–± –ø–æ–∫–∞ –Ω–µ—Ç.');
        return;
      }

      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet('–ñ–∞–ª–æ–±—ã');

      worksheet.columns = [
        { header: '‚Ññ', key: 'index', width: 5 },
        { header: '–§–∏–ª–∏–∞–ª', key: 'branch', width: 20 },
        { header: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', key: 'category', width: 20 },
        { header: '–ñ–∞–ª–æ–±–∞ (—Ç–µ–∫—Å—Ç)', key: 'text', width: 40 },
        { header: '–ì–æ–ª–æ—Å (URL)', key: 'voiceUrl', width: 40 },
        { header: '–§.–ò.–û –ø–∞—Ü–∏–µ–Ω—Ç–∞', key: 'patientFullName', width: 25 },
        { header: '–¢–µ–ª–µ—Ñ–æ–Ω –ø–∞—Ü–∏–µ–Ω—Ç–∞', key: 'patientPhoneNumber', width: 18 },
        { header: '–°–æ–∑–¥–∞–Ω–æ', key: 'createdAt', width: 20 },
      ];

      worksheet.getRow(1).eachCell((cell) => {
        cell.font = { bold: true };
        cell.alignment = { vertical: 'middle', horizontal: 'center' };
        cell.border = {
          top: { style: 'thin' },
          left: { style: 'thin' },
          bottom: { style: 'thin' },
          right: { style: 'thin' },
        };
        cell.fill = {
          type: 'pattern',
          pattern: 'solid',
          fgColor: { argb: 'FFDEEAF6' },
        };
      });

      complaints.forEach((complaint, i) => {
        const row = worksheet.addRow({
          index: i + 1,
          branch: complaint.branch,
          category: complaint.category,
          text: complaint.text || '',
          patientFullName: complaint.patientFullName || '',
          patientPhoneNumber: complaint.patientPhoneNumber || '',
          createdAt: format(complaint.createdAt, 'yyyy-MM-dd HH:mm'),
        });

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏ –¥–ª—è voiceUrl
        if (complaint.voiceUrl) {
          const cell = row.getCell('voiceUrl');
          cell.value = {
            text: 'üîä –ê—É–¥–∏–æ',
            hyperlink: complaint.voiceUrl,
          };
          cell.font = { color: { argb: 'FF0000FF' }, underline: true };
        }

        row.eachCell((cell) => {
          cell.alignment = {
            vertical: 'middle',
            horizontal: 'left',
            wrapText: true,
          };
          cell.border = {
            top: { style: 'thin' },
            left: { style: 'thin' },
            bottom: { style: 'thin' },
            right: { style: 'thin' },
          };
        });
      });

      const exportPath = path.resolve(__dirname, '..', '..', 'temp');
      fs.mkdirSync(exportPath, { recursive: true });

      const fileName = `all-complaints-${telegramId}.xlsx`;
      const filePath = path.join(exportPath, fileName);
      await workbook.xlsx.writeFile(filePath);

      await ctx.replyWithDocument({
        source: filePath,
        filename: '–í—Å–µ_–∂–∞–ª–æ–±—ã.xlsx',
      });

      fs.unlinkSync(filePath);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∂–∞–ª–æ–±:', error);
      await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∂–∞–ª–æ–±. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.');
    }
  }

  async askBranch(ctx: TelegrafContext) {
    const telegramId = ctx.from?.id;
    const user = await this.userRepo.findOne({ where: { telegramId } });
    if (!user) return;

    user.complaintStep = 'branch';
    await this.userRepo.save(user);

    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:',
      this.withCancelButton(this.getBranchMenu()),
    );
  }

  async handleVoiceOrTextComplaint(ctx: TelegrafContext): Promise<void> {
    const telegramId: number | undefined = ctx.from?.id;
    if (!telegramId) return;

    const user = await this.userRepo.findOne({ where: { telegramId } });
    if (!user || !user.isAuthorized) return;

    if (user.complaintStep !== steps.complaints) {
      await ctx.reply(
        '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–¥–∞—á—É –∂–∞–ª–æ–±—ã –∑–∞–Ω–æ–≤–æ. –í—ã –Ω–µ –Ω–∞ —ç—Ç–∞–ø–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
      );
      return;
    }

    const message = ctx.message as Message.VoiceMessage | undefined;
    const voice = message?.voice;
    if (!voice) return;

    const botToken = process.env.BOT_TOKEN;
    if (!botToken) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.');
      return;
    }

    await ctx.reply('‚è≥ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');

    try {
      // 1. –ü–æ–ª—É—á–∏—Ç—å file_path
      const fileInfoRes = await axios.get(
        `https://api.telegram.org/bot${botToken}/getFile?file_id=${voice.file_id}`,
      );

      const filePath = fileInfoRes.data.result.file_path;
      if (!filePath) {
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
        return;
      }

      // 2. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å URL –∏ –∏–º—è —Ñ–∞–π–ª–∞
      const fileUrl = `https://api.telegram.org/file/bot${botToken}/${filePath}`;
      const filename = `${randomUUID()}.ogg`;
      const uploadDir = path.resolve(
        __dirname,
        '..',
        '..',
        'uploads',
        'voices',
      );
      const fileSavePath = path.join(uploadDir, filename);

      // 3. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      fs.mkdirSync(uploadDir, { recursive: true });

      // 4. –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
      const response = await axios.get(fileUrl, { responseType: 'stream' });
      const writer = fs.createWriteStream(fileSavePath);
      response.data.pipe(writer);

      await new Promise<void>((resolve, reject) => {
        writer.on('finish', resolve);
        writer.on('error', reject);
      });

      // 5. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π URL
      const voiceUrl = `https://orzu-med-complaints-server-production.up.railway.app/uploads/voices/${filename}`;

      // 6. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ user
      user.complaintTextOrVoiceUrl = voiceUrl;
      user.complaintStep = steps.complaints;
      await this.userRepo.save(user);

      await ctx.reply(
        '‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É (.)',
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      await ctx.reply(
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
      );
    }
  }

  private withCancelButton(markup: ReturnType<typeof Markup.keyboard>) {
    return Markup.keyboard([...markup.reply_markup.keyboard, ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']])
      .resize()
      .oneTime();
  }

  private getMainMenu() {
    return Markup.keyboard([['üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∂–∞–ª–æ–±'], ['‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É']])
      .resize()
      .oneTime();
  }

  private getBranchMenu() {
    return Markup.keyboard([
      ['–ó–∞–Ω–≥–∏–æ—Ç–∞', '–Æ–Ω—É—Å–æ–±–æ–¥'],
      ['–§–æ—Ç–∏–º–∞-–°—É–ª—Ç–æ–Ω', '–ß–∏–Ω–æ–∑'],
      ['–Ø–Ω–≥–∏–±–æ–∑–æ—Ä', '–ü–∞—Ä–∫–µ–Ω—Ç'],
      ['–û–∫–∫—É—Ä–≥–∞–Ω'],
    ])
      .resize()
      .oneTime();
  }

  private getCategoryMenu() {
    return Markup.keyboard([
      ['–í—Ä–∞—á–ª–∞—Ä', '–•–∞–º—à–∏—Ä–∞–ª–∞—Ä'],
      ['–¢–æ–∑–∞–ª–∏–∫', '–û—à—Ö–æ–Ω–∞ –≤–∞ –æ—à–ø–∞–∑–ª–∞—Ä'],
      ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ —Ö–æ–¥–∏–º–ª–∞—Ä–∏', '–ö–∏–ª–∏–Ω–∏–∫–∞'],
    ])
      .resize()
      .oneTime();
  }
}
